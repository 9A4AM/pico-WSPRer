///////////////////////////////////////////////////////////////////////////////
//
//  Roman Piksaykin [piksaykin@gmail.com], R2BDY
//  https://www.qrz.com/db/r2bdy
//
///////////////////////////////////////////////////////////////////////////////
//
//
//  @brief dco2.pio - Digital controlled radio freq oscillator based on PIO.
// 
//
//  DESCRIPTION
//
//      The oscillator provides precise generation of any frequency ranging
//  from 1 Hz to 33.333 MHz with tenth's of millihertz resolution (please note that
//  this is relative resolution owing to the fact that the absolute accuracy of 
//  onboard crystal of pi pico is limited; the absoulte accuracy can be provided
//  when using GPS reference option included).
//      The DCO uses phase locked loop principle programmed in C and PIO asm.
//      The DCO does *NOT* use any floating point operations - all time-critical
//  instructions run in 1 CPU cycle.
//      Currently the upper freq. limit is about 33.333 MHz and it is achieved only
//  using pi pico overclocking to 270 MHz.
//      Owing to the meager frequency step, it is possible to use 3, 5, or 7th
//  harmonics of generated frequency. Such solution completely cover all HF and
//  a portion of VHF band up to about 233 MHz.
//      Unfortunately due to pure digital freq.synthesis principle the jitter may
//  be a problem on higher frequencies. You should assess the quality of generated
//  signal if you want to emit a noticeable power.
//      This is an experimental project of amateur radio class and it is devised
//  by me on the free will base in order to experiment with QRP narrowband
//  digital modes.
//      I appreciate any thoughts or comments on that matter.
//
//  PLATFORM
//      Raspberry Pi pico.
//
//  REVISION HISTORY
// 
//      Rev 0.1   05 Nov 2023   Initial release
//      Rev 0.2   18 Nov 2023
//      Rev 1.0   10 Dec 2023   Improved frequency range (to ~33.333 MHz).
//
//  PROJECT PAGE
//      https://github.com/RPiks/pico-hf-oscillator
//
//  LICENCE
//      MIT License (http://www.opensource.org/licenses/mit-license.php)
//
//  Copyright (c) 2023 by Roman Piksaykin
//  
//  Permission is hereby granted, free of charge,to any person obtaining a copy
//  of this software and associated documentation files (the Software), to deal
//  in the Software without restriction,including without limitation the rights
//  to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
//  copies of the Software, and to permit persons to whom the Software is
//  furnished to do so, subject to the following conditions:
//
//  The above copyright notice and this permission notice shall be included in
//  all copies or substantial portions of the Software.
//
//  THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
//  IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
//  FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
//  AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
//  LIABILITY,WHETHER IN AN ACTION OF CONTRACT,TORT OR OTHERWISE, ARISING FROM,
//  OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
//  THE SOFTWARE.
///////////////////////////////////////////////////////////////////////////////
.program dco
// one generated period is 2 . y + 8 cyc. long, so minimaly (if y = 0) 8 cycles
// PioDCOWorker2 pushes periodicaly i32wc value to the output shift register
// for example for 135 MHz clock and 14.097 MHz output we need 9.576505.. cycles
// i.e. 4.78825 - PIOASM_DELAY_CYCLES = 0.78825 cycles per halfperiod 
// which is approximately 11/14 so we will be pushed something like:
// 1, 1, 1, 0, 1, 1, 1, 0, 1, 1, 1, 1, 0, 1, ....

.wrap_target            //                                             [cycles]
    out y, 32           // gets i32wc from output shift register into y    [1]
    mov x, y            // moves the y value to x register                 [1]
LOOP0:
    jmp x-- LOOP0       // decrements x until 0                          [x+1]
    set pins, 1         // sets 0b01 to two output pins                    [1]
    
    mov x, y        [1] // moves the y value to x register (1 cycle added) [2]
LOOP1:
    jmp x-- LOOP1       // decrements x until 0                          [x+1]
    set pins, 2         // sets 0b10 to two output pins                    [1]
                        //                                        Sum  [2.x+8] 
    mov x, y        [1] // we will run one more period to give core 1 time
LOOP2:                  // to calculate next i32wc value
    jmp x-- LOOP2      
    set pins, 1         

    mov x, y        [1] 
LOOP3:
    jmp x-- LOOP3       
    set pins, 2         
.wrap                   // go to begining to get new i32wc value

% c-sdk {

#define PIOASM_DELAY_CYCLES 4       // fixed delay cycles per halfperiod

/// @brief Inicialization of PIO oscilator
/// @param pio PIO number
/// @param sm Status machine number
/// @param pio offset PIO program offset
/// @param pio pin Output pin (we use two pins for output [pin] and [pin + 1])
/// @return No return. It just starts the PIO 
static inline void dco_program_init(PIO pio, uint sm, uint offset, uint pin)
{
    pio_sm_config c = dco_program_get_default_config(offset);
   
    sm_config_set_out_shift(&c, true, true, 32);    // Autopull from FIFO
    sm_config_set_fifo_join(&c, PIO_FIFO_JOIN_TX);  // Join RX and TX FIFOs
    
    sm_config_set_out_pins(&c, pin, 2);				// Two output pins
    pio_gpio_init(pio, pin);                        // Init first pin
	pio_gpio_init(pio, pin+1); 					    // Init second pin

    pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, true); //Set pins to output
    
    sm_config_set_clkdiv_int_frac(&c, 1u, 0u);      // PIO CLK = system CLK 

    pio_sm_init(pio, sm, offset, &c);               // PIO initialized 
    pio_sm_set_enabled(pio, sm, true);              // PIO started
}

%}
